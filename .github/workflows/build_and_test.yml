name: Build and Test

on:
  push:
    branches:
      - '**'
  pull_request:
    types: [opened, reopened, ready_for_review]
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: openjdk:8-jdk
    env:
      _JAVA_OPTIONS: "-Xmx3G -Xms2G"
    defaults:
      run:
        working-directory: .
    steps:
      - uses: actions/checkout@v2
      - name: Setup System Tools
        run: |
          apt update -y
          apt install -y gnupg2 curl
      - name: Install Node.js
        run: |
          curl -fsSL https://deb.nodesource.com/setup_16.x | bash -
          apt-get install -y nodejs
      - name: Check Node.js version
        run: node --version
      - name: Verify files
        run: |
          curl -sSL https://secchannel.rsk.co/SUPPORT.asc | gpg2 --import -
          gpg2 --verify SHA256SUMS.asc && sha256sum --check SHA256SUMS.asc

      - uses: actions/cache@v4
        name: Cache Gradle
        with:
          path: |
            .gradle/caches
            gradle/wrapper
            rsk-core/build
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build
        run: |
          ./configure.sh
          ./gradlew --no-daemon dependencies
          ./gradlew --no-daemon --stacktrace build -x test
          ls -la ./gradle/wrapper/gradle-wrapper.jar

  sonarqube:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: eclipse-temurin:17-jdk
    defaults:
        run:
            working-directory: .
    steps:
      - uses: actions/checkout@v2
      - name: Run SonarQube analysis
        run: |
          echo "Installing git"
          apt-get update && apt-get install -yqq git
          extra_flags=""
          echo "Get GH event type"
          event_name="${{ github.event_name }}"
          if [ "$event_name" = "pull_request" ]; then
            echo "Setting up PR analysis"
            echo "switch to master"
            git branch -f master origin/master
            pr_number=${{ github.event.pull_request.number }}
            echo "PR number: $pr_number"
            extra_flags="-Dsonar.pullrequest.base=master -Dsonar.pullrequest.branch=${{ github.head_ref }} -Dsonar.pullrequest.key=$pr_number"
            echo "PR analysis flags: $extra_flags"
          else
            echo "Setting up branch analysis"
            extra_flags="-Dsonar.branch.name=master"
            echo "Branch analysis flags: $extra_flags"
          fi

          sonar_url=${{ secrets.SONAR_URL }}
          sonar_token=${{ secrets.SONAR_TOKEN }}
          echo "Event name: $event_name"
          echo "Sonar URL: $sonar_url"

          echo "Running SonarQube analysis"
          ./configure.sh
          ./gradlew sonarqube --no-daemon -x build -x test $extra_flags \
          -Dsonar.organization=rsksmart -Dsonar.host.url="$sonar_url" -Dsonar.login="$sonar_token"

  tests:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: openjdk:8-jdk
    defaults:
      run:
        working-directory: .
    steps:
      - uses: actions/checkout@v2

      - name: Setup System Tools
        run: |
          apt update -y
          apt install -y curl
      - name: Install Node.js
        run: |
          curl -fsSL https://deb.nodesource.com/setup_16.x | bash -
          apt-get install -y nodejs
      - name: Check Node.js version
        run: node --version

      - uses: actions/cache@v4
        name: Restore gradle cache
        with:
          path: |
            .gradle/caches
            gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Get Gradle jar
        run: |
          ./configure.sh

      - name: Unit tests
        run: |
          chmod +x ./gradlew
          ./gradlew --no-daemon --stacktrace test
      - name: Integration tests
        run: |
          chmod +x ./gradlew
          ./gradlew --no-daemon --stacktrace test

      - name: Save test results
        run: |
          mkdir -p ~/junit/
          find rskj-core/build/test-results -type f -name "*.xml" -exec cp {} ~/junit/ \;
        if: always()

  build-push-docker-images:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the mining integration tests repository
        uses: actions/checkout@v4
        with:
          repository: jurajpiar/mining-integration-tests
#          ref: ${{ secrets.MINING_INTEGRATION_TESTS_REF }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images
        run: |
          docker build -t jurajpiar/bitcoind1:latest -f bitcoind1.Dockerfile .
          docker push jurajpiar/bitcoind1:latest
          docker build -t jurajpiar/bitcoind2:latest -f bitcoind2.Dockerfile .
            docker push jurajpiar/bitcoind2:latest


  mining-tests:
    needs:
      - build-push-docker-images
      - build
    runs-on: ubuntu-latest
    services:
        bitcoind1:
            image: jurajpiar/bitcoind1:latest
            ports:
            - 8331:8331
            - 31591:31591
            - 32591:32591
            options: --name bitcoind1
        bitcoind2:
            image: jurajpiar/bitcoind2:latest
            ports:
            - 8332:8332
            - 31592:31592
            - 32592:32592
            options: --name bitcoind2
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '12.x'
      - name: Check Node.js version
        run: node --version

      - name: Checkout Mining Integration Tests Repository
        uses: actions/checkout@v4
        with:
          repository: jurajpiar/mining-integration-tests
          ref: ${{ secrets.MINING_INTEGRATION_TESTS_REF }}
          token: ${{ secrets.GITHUB_TOKEN }}
          path: mining-integration-tests

      - name: Install Mining Integration Tests dependencies
        working-directory: mining-integration-tests
        run: |
          npm ci

      - name: Generate BTC blocks
        working-directory: mining-integration-tests
        run: |
          node --unhandled-rejections=strict generateBtcBlocks.js

      - name: Setup Java JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Verify Java installation
        run: java -version

      - uses: actions/cache@v4
        name: Restore gradle cache
        with:
          path: |
            .gradle/caches
            gradle/wrapper
            rsk-core/build
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build
        run: |
          ./configure.sh
          ./gradlew --no-daemon dependencies
          ./gradlew --no-daemon --stacktrace build -x test

      - name: Start RSKj and Run Tests
        working-directory: mining-integration-tests
        run: |
          version=$(tr -d "'\"" < ../rskj-core/src/main/resources/version.properties \
            | cut -d = -f 2- | paste -sd - -)
          ls -la ../rskj-core/build/libs/rskj-core-"$version"-all.jar
          java -Drsk.conf.file=./rsk-integration-test.conf -cp ../rskj-core/build/libs/rskj-core-"$version"-all.jar co.rsk.Start --regtest & rskpid=$!
          until nc -z 127.0.0.1 4444
            do
              echo "Waiting for RskJ..."
              sleep 1
            done
            npm test
            kill $rskpid

      - name: Review test results
        working-directory: mining-integration-tests
        if: always()
        run: |
           cat ./Results/mocha/Test-Results.xml